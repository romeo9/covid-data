{"version":3,"sources":["views/title/Title.jsx","views/data/TableData.jsx","views/data/AllCountry.jsx","properties/properties.js","views/ExternalContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["Title","Container","React","Component","TableData","props","state","columns","id","label","minWidth","rowsPerPage","this","data","Segment","Table","striped","Header","Row","map","column","HeaderCell","key","align","style","Body","i","Cell","country","cases","todayCases","deaths","todayDeaths","recovered","active","critical","AllCountry","x","toString","replace","length","flatMap","reduce","a","b","Statistic","Group","color","Value","numberWithCommas","Label","properties","ExternalContainer","fetch","then","response","json","jsonResponse","setState","Grid","divided","Column","App","className","rel","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d8b6babb.chunk.js","sourcesContent":["import React from 'react';\nimport { Container } from 'semantic-ui-react';\n\n/*\n    maxWidth options:\n    xs, sm, md, lg, xl.\n*/\n\nclass Title extends React.Component {\n\n    render(){\n        return(\n            <Container>\n                <h1>Covid-19</h1>\n            </Container>\n        )\n    }\n}\n\nexport default Title","import React from 'react';\nimport { Table, Container, Segment } from 'semantic-ui-react';\n\n\nclass TableData extends React.Component {\n\n    constructor(props){\n      super(props)\n      this.state = {\n        columns: [\n          { id: 'country', label: 'Country', minWidth: 170 },\n          { id: 'cases', label: 'Cases', minWidth: 100 },\n          { id: 'todayCases', label: 'Today Cases'},\n          { id: 'deaths', label: 'Deaths' },\n          { id: 'todayDeaths', label: 'Today Deaths' },\n          { id: 'recovered', label: 'Recovered'},\n          { id: 'active', label: 'Active'},\n          { id: 'critical', label: 'Critical'}\n      ],\n        rowsPerPage: 10\n      }  \n    }\n\n\n    render(){\n\n      const columns = this.state.columns\n      const data = this.props.data\n      \n\n        return(\n      <Segment>\n      <Container>\n        <Table striped>\n          <Table.Header>\n            <Table.Row>\n              {columns.map(column => (\n                <Table.HeaderCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}>\n                  {column.label}\n                </Table.HeaderCell>\n              ))}\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            { data.map(i => {\n              return(\n                <Table.Row>\n                  <Table.Cell>{i.country}</Table.Cell>\n                  <Table.Cell>{i.cases}</Table.Cell>\n                  <Table.Cell>{i.todayCases}</Table.Cell>\n                  <Table.Cell>{i.deaths}</Table.Cell>\n                  <Table.Cell>{i.todayDeaths}</Table.Cell>\n                  <Table.Cell>{i.recovered}</Table.Cell>\n                  <Table.Cell>{i.active}</Table.Cell>\n                  <Table.Cell>{i.critical}</Table.Cell>\n                </Table.Row>\n              )\n            })}\n          </Table.Body>\n        </Table>\n      </Container>\n      {/* <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={rows.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      /> */}\n    </Segment>\n        )\n    }\n}\n\n\nexport default TableData;","import React from 'react';\nimport { Container, Statistic } from 'semantic-ui-react';\n\nclass AllCountry extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            cases: 0,\n            deaths: 0,\n            recovered: 0\n        }\n\n    }\n\n    numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    render(){\n\n        const cases = this.props.data.length!==0 && this.props.data.flatMap(i => i.cases).reduce((a,b) => a+b)\n        const deaths = this.props.data.length!==0 && this.props.data.flatMap(i => i.deaths).reduce((a,b) => a+b)\n        const recovered = this.props.data.length!==0 && this.props.data.flatMap(i => i.recovered).reduce((a,b) => a+b)\n\n        return(\n            <Container>\n                <Statistic.Group>\n                    <Statistic color='red'>\n                        <Statistic.Value>{this.numberWithCommas(cases)}</Statistic.Value>\n                        <Statistic.Label>Cases</Statistic.Label>\n                    </Statistic>\n                    <Statistic color='black'>\n                        <Statistic.Value>{this.numberWithCommas(deaths)}</Statistic.Value>\n                        <Statistic.Label>Deaths</Statistic.Label>\n                    </Statistic>\n                    <Statistic color='green'>\n                        <Statistic.Value>{this.numberWithCommas(recovered)}</Statistic.Value>\n                        <Statistic.Label>Recovered</Statistic.Label>\n                    </Statistic>\n                </Statistic.Group>\n            </Container>\n        )\n    }\n}\n\nexport default AllCountry;","export const properties = {\n    websiteUrl: \"https://coronavirus-19-api.herokuapp.com/countries\"\n};","import React from 'react';\nimport Title from './title/Title';\nimport TableData from './data/TableData';\nimport AllCountry from './data/AllCountry';\nimport { Grid, Container } from 'semantic-ui-react';\nimport { properties } from '../properties/properties'\n\n\nclass ExternalContainer extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            data: []\n        }\n    }\n\n\n    componentDidMount(){\n        fetch(properties.websiteUrl)\n          .then(response => response.json())\n          .then(jsonResponse => this.setState({ data: jsonResponse }))\n      }\n\n  render (){\n    const data = this.state.data\n\n      return(\n        <Container >\n            <Grid divided='vertically'>\n                <Grid.Row columns={1}>\n                    <Grid.Column>\n                        <Title></Title>\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row columns={1}>\n                    <Grid.Column>\n                        <AllCountry\n                            data = {data}\n                        />\n                    </Grid.Column>\n                    {/* <Grid.Column>\n                        <div>...</div>\n                    </Grid.Column> */}\n                </Grid.Row>\n                <Grid.Row columns={1}>\n                    <Grid.Column>\n                        <TableData\n                            data = {data}\n                        />\n                        </Grid.Column>\n                </Grid.Row>\n\n            </Grid>\n        </Container>\n      )\n  }\n}\n\nexport default ExternalContainer","import React from 'react';\nimport './App.css';\nimport ExternalContainer from './views/ExternalContainer'\n\nfunction App() {\n  return (\n    \n    <div className=\"App\">\n      <link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\" />\n\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      <ExternalContainer></ExternalContainer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}